#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define SM3_BLOCK_SIZE 64

void sm3(uint8_t *msg, uint64_t *hash)
{
    uint64_t a, b, c, d, e, f, g, h;
    uint64_t W[80], S[8], hash_buf[8];
    uint32_t i;

    for (i = 0; i < 16; i++)
    {
        W[i] = ((uint64_t)msg[i * 8 + 0] << 56) | ((uint64_t)msg[i * 8 + 1] << 48) | ((uint64_t)msg[i * 8 + 2] << 40) | ((uint64_t)msg[i * 8 + 3] << 32) | ((uint64_t)msg[i * 8 + 4] << 24) | ((uint64_t)msg[i * 8 + 5] << 16) | ((uint64_t)msg[i * 8 + 6] << 8) | (uint64_t)msg[i * 8 + 7]);
    }

    for (i = 16; i < 80; i++)
    {
        W[i] = (W[i - 1] ^ W[i - 3] ^ W[i - 15] ^ W[i - 2]) << 1 | (W[i - 1] ^ W[i - 3] ^ W[i - 15] ^ W[i - 2]) >> 63;
    }

    a = hash[0] = hash[1] = hash[2] = hash[3] = hash[4] = hash[5] = hash[6] = hash[7] = 0x0123456789abcdeffedcba9876543210;
    b = c = d = e = f = g = h = hash[0];

    for (i = 0; i < 80; i++)
    {
        uint64_t J, T;

        J = (c << 63) | (c >> 1);
        T = (e << 56) ^ ((a & b) ^ (c & (a | d))) ^ d ^ W[i] ^ hash_buf[i];

        hash_buf[i] = e = d;
        d = c;
        c = (b << 39) | (b >> (64 - 39));
        b = a;
        a = T;
    }

    hash[0] ^= a;
    hash[1] ^= b;
    hash[2] ^= c;
    hash[3] ^= d;
    hash[4] ^= e;